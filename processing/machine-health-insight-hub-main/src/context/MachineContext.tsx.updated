import { createContext, useState, useContext } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { AllMachinesData, AggregatedMachineData, MaintenanceSuggestion } from "@/types/machine";
import { 
  fetchAllMachinesData, 
  fetchMachineData, 
  fetchMaintenanceSuggestion,
  simulateMachineData as apiSimulateMachineData
} from "@/services/api";

interface MachineContextProps {
  allMachinesData: Record<string, any[]> | null;
  selectedMachineId: string | null;
  selectedMachineData: any[] | null;
  maintenanceSuggestion: MaintenanceSuggestion | null;
  isLoading: boolean;
  error: string | null;
  selectMachine: (machineId: string) => void;
  refreshData: () => Promise<void>;
  simulateMachineData: (
    machineId: string,
    temperature?: number,
    vibration?: number,
    feature1?: number,
    variation?: number
  ) => Promise<any>;
}

const MachineContext = createContext<MachineContextProps | undefined>(undefined);

export function useMachine() {
  const context = useContext(MachineContext);
  if (!context) {
    throw new Error("useMachine must be used within a MachineProvider");
  }
  return context;
}

export function MachineProvider({ children }: { children: React.ReactNode }) {
  const [selectedMachineId, setSelectedMachineId] = useState<string | null>(null);
  const queryClient = useQueryClient();

  const { 
    data: allMachinesData, 
    isLoading: isLoadingAllMachines, 
    error: allMachinesError,
    refetch: refetchAllMachines 
  } = useQuery<AllMachinesData>({
    queryKey: ['allMachines'],
    queryFn: fetchAllMachinesData,
    retry: false,
    refetchOnWindowFocus: false
  });

  const { 
    data: selectedMachineData, 
    isLoading: isLoadingSelectedMachine, 
    error: selectedMachineError,
    refetch: refetchSelectedMachine 
  } = useQuery<AggregatedMachineData | undefined>({
    queryKey: ['machine', selectedMachineId],
    queryFn: () => selectedMachineId ? fetchMachineData(selectedMachineId) : undefined,
    enabled: !!selectedMachineId,
    retry: false,
    refetchOnWindowFocus: false
  });

  const { 
    data: maintenanceSuggestion, 
    isLoading: isLoadingMaintenance, 
    error: maintenanceError,
    refetch: refetchMaintenanceSuggestion
  } = useQuery<MaintenanceSuggestion | undefined>({
    queryKey: ['maintenance', selectedMachineId],
    queryFn: () => selectedMachineId ? fetchMaintenanceSuggestion(selectedMachineId) : undefined,
    enabled: !!selectedMachineId,
    retry: false,
    refetchOnWindowFocus: false
  });

  const selectMachine = (machineId: string) => {
    setSelectedMachineId(machineId);
  };

  const refreshData = async () => {
    await Promise.all([
      queryClient.invalidateQueries({ queryKey: ['allMachines'] }),
      selectedMachineId ? queryClient.invalidateQueries({ queryKey: ['machine', selectedMachineId] }) : Promise.resolve(),
      selectedMachineId ? queryClient.invalidateQueries({ queryKey: ['maintenance', selectedMachineId] }) : Promise.resolve()
    ]);
  };

  // Add simulation mutation
  const simulateMutation = useMutation({
    mutationFn: async (params: { 
      machineId: string, 
      temperature?: number, 
      vibration?: number, 
      feature1?: number, 
      variation?: number 
    }) => {
      const { machineId, temperature, vibration, feature1, variation } = params;
      return await apiSimulateMachineData(machineId, temperature, vibration, feature1, variation);
    },
    onSuccess: () => {
      // Invalidate and refetch after simulation
      queryClient.invalidateQueries({ queryKey: ['allMachines'] });
      if (selectedMachineId) {
        queryClient.invalidateQueries({ queryKey: ['machine', selectedMachineId] });
        queryClient.invalidateQueries({ queryKey: ['maintenance', selectedMachineId] });
      }
    }
  });

  const isLoading = isLoadingAllMachines || isLoadingSelectedMachine || isLoadingMaintenance || simulateMutation.isLoading;
  const error = allMachinesError?.message || selectedMachineError?.message || maintenanceError?.message || simulateMutation.error?.message || null;

  const simulateMachine = async (
    machineId: string,
    temperature?: number,
    vibration?: number,
    feature1?: number,
    variation?: number
  ) => {
    return await simulateMutation.mutateAsync({
      machineId,
      temperature,
      vibration,
      feature1,
      variation
    });
  };
  
  return (
    <MachineContext.Provider
      value={{
        allMachinesData: allMachinesData?.data || null,
        selectedMachineId,
        selectedMachineData: selectedMachineData?.data || null,
        maintenanceSuggestion: maintenanceSuggestion || null,
        isLoading,
        error,
        selectMachine,
        refreshData,
        simulateMachineData: simulateMachine
      }}
    >
      {children}
    </MachineContext.Provider>
  );
}
